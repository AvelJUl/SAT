# Generated by Django 2.1.5 on 2019-03-23 15:09

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('labs', '0006_auto_20190307_1342'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Student card number of a student or surname and initials of a teacher.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(regex='^{([A-Z][a-z]+(-[A-Z][a-z]+)?[A-Z]{2})|\\d{7}}$')], verbose_name='username')),
                ('first_name', models.CharField(help_text='First name of a student or of a teacher.', max_length=15, validators=[django.core.validators.RegexValidator(regex='[A-Z][a-z]+(-[A-Z][a-z]+)?')], verbose_name='first name')),
                ('surname', models.CharField(help_text='Surname of a student or of a teacher.', max_length=25, validators=[django.core.validators.RegexValidator(regex='[A-Z][a-z]+(-[A-Z][a-z]+)?')], verbose_name='surname')),
                ('patronymic', models.CharField(help_text='Patronymic name of a student or of a teacher.', max_length=20, validators=[django.core.validators.RegexValidator(regex='[A-Z][a-z]+(-[A-Z][a-z]+)?')], verbose_name='patronymic')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True, validators=[django.core.validators.RegexValidator(regex='^\\+?375(17|25|29|33|44)\\d{7}$')], verbose_name='phone number')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ('username',),
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('faculty', models.PositiveSmallIntegerField(choices=[(0, 'Faculty of Computer-Aided Design'), (1, 'Faculty of Information Technologies and Control'), (2, 'Faculty of Radioengineering and Electronics'), (3, 'Faculty of Computer Systems and Networks'), (4, 'Faculty of Infocommunications'), (5, 'Faculty of Engineering and Economics'), (6, 'Military Faculty'), (7, 'Faculty of Innovative Lifelong Learning'), (8, 'Faculty of Pre-University Preparation and Occupational Guidance')], verbose_name='faculty')),
                ('year_of_studying', models.PositiveSmallIntegerField(verbose_name='year of study')),
                ('specialty', models.PositiveSmallIntegerField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', related_query_name='student', to='labs.Group', verbose_name='study group')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'ordering': ('group',),
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacher', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('academic_position', models.CharField(blank=True, max_length=100, null=True, verbose_name='academic position')),
                ('administrative_position', models.CharField(blank=True, max_length=100, null=True, verbose_name='administrative position')),
                ('academic_degree', models.CharField(blank=True, max_length=50, null=True, verbose_name='academic degree')),
                ('auditorium', models.CharField(help_text='Required. Format: auditorium-campus.', max_length=5, validators=[django.core.validators.RegexValidator(regex='^\\d{3}[a-z]?-[1-9]$')], verbose_name='auditorium')),
            ],
            options={
                'verbose_name': 'teacher',
                'verbose_name_plural': 'teachers',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
